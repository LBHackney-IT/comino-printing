version: 2.1

executors:
  dotnet-executor:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.1

    working_directory: ~/repo

jobs:
  build:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:2.1
      - image: amazon/dynamodb-local

    working_directory: ~/repo

    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Install Unzip
          command: apt-get update && apt-get install unzip

      - run:
          name: Install AWS CLI
          command: |
            curl -L -o awscliv2.zip "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
            unzip awscliv2.zip
            ./aws/install

      - run:
          name: (TEMPORARY) Remove spike projects to exclude from build/test steps here
          command: dotnet sln remove RtfParseTests RtfParseSpike

      - run:
          name: Concatenate all csproj files into single file for checksum
          command: cat */**/*.csproj > combined-csproj.txt

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "combined-csproj.txt" }}
            - v1-dependencies-

      - run:
          name: Install Node.js
          command: |
            curl -sL https://deb.nodesource.com/setup_13.x | bash -
            apt-get install -y nodejs

      - run:
          name: NPM Install
          command: npm install

      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin

      - run:
          name: Run Test DynamoDb
          command: docker run --rm --name test-dynamodb -d -p 8000:8000 -v $(pwd)/local/dynamodb:/data/ amazon/dynamodb-local -jar DynamoDBLocal.jar -sharedDb -dbPath /data

      - run:
          name: Configure AWS
          command: |
            aws configure set aws_access_key_id TestAccessKey
            aws configure set aws_secret_access_key TestSecretKey
            aws configure set region eu-west-2
            aws configure set cli_pager ""

      - run:
          name: Install dependencies
          command: dotnet restore

      - run:
          name: Build project
          command: dotnet build

      - run:
          name: Run tests
          # The following issue is affecting our test command here:
          # https://github.com/dotnet/core/issues/2775
          command: x=$(dotnet test); echo $x;

      - save_cache:
          paths:
            - ~/.nuget/packages
          key: v1-dependencies-{{ checksum "combined-csproj.txt" }}

      - persist_to_workspace:
          root: ~/repo
          paths: .

  deploy-staging:
    executor: dotnet-executor

    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Install Node.js
          command: |
            curl -sL https://deb.nodesource.com/setup_13.x | bash -
            apt-get install -y nodejs

      - run:
          name: Install serverless
          command: npm i -g serverless

      - run:
          name: Set AWS credentials
          command: serverless config credentials -p aws --stage staging --key ${AWS_ACCESS_KEY_ID} --secret ${AWS_SECRET_ACCESS_KEY} --profile hackney

      - run:
          name: Deploy application
          command: apt-get install make && touch .env && STAGE=staging REACT_APP_API_URL=$STAGING_API_URL make deploy

  deploy-production:
    executor: dotnet-executor

    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Install Node.js
          command: |
            curl -sL https://deb.nodesource.com/setup_13.x | bash -
            apt-get install -y nodejs

      - run:
          name: Install serverless
          command: npm i -g serverless

      - run:
          name: Set AWS credentials
          command: serverless config credentials -p aws --stage production --key ${AWS_ACCESS_KEY_ID} --secret ${AWS_SECRET_ACCESS_KEY} --profile hackney

      - run:
          name: Deploy application
          command: apt-get install make && touch .env && STAGE=production  REACT_APP_API_URL=$PRODUCTION_API_URL make deploy

workflows:
  version: 2
  continuous-delivery:
    jobs:
      - build
      - deploy-staging:
          requires:
            - build
          filters:
            branches:
              only:
                - master
      - permit-deploy-production:
          type: approval
          requires:
            - deploy-staging
      - deploy-production:
          requires:
            - permit-deploy-production
